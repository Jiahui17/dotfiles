"
"               ██
"               ▀▀
"  ██▄  ▄██   ████     ████▄██▄   ██▄████   ▄█████▄
"   ██  ██      ██     ██ ██ ██   ██▀      ██▀    ▀
"   ▀█▄▄█▀      ██     ██ ██ ██   ██       ██
"    ████    ▄▄▄██▄▄▄  ██ ██ ██   ██       ▀██▄▄▄▄█
"     ▀▀     ▀▀▀▀▀▀▀▀  ▀▀ ▀▀ ▀▀   ▀▀         ▀▀▀▀▀
" 

set rtp+=$XDG_CONFIG_HOME/vim
set rtp+=$XDG_CACHE_HOME/vim

" ---- automatically install the plugin manager on start ---- "
let data_dir = has('nvim') ? stdpath('data') . '/site' : "$XDG_CACHE_HOME/" . 'vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" automatically run PlugInstall on startup if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
      \| PlugInstall --sync | source $MYVIMRC
      \| endif

call plug#begin(data_dir)
Plug 'christoomey/vim-tmux-navigator'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'justinmk/vim-syntax-extra'
Plug 'psf/black', { 'branch': 'stable' }
Plug 'Yggdroot/indentLine'
call plug#end()

" ---- Color Scheme ---- "
" let g:lightline = {'colorscheme': 'catppuccin_frappe'}
" colorscheme catppuccin_mocha
colorscheme default

" ---- Status Line ---- "
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
let g:airline_theme='onedark'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" ---- Cursor Style---- "
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

"enable syntax highlighting
syntax on

"disable ex mode
map Q <Nop> 

set mouse=a "mouse integration between tmux
set number "show the line numbers
set noswapfile
set nocompatible

" ---- Clipboard settings ---- "

"-- This will put everything into the system clipboard
"set clipboard+=unnamedplus,unnamed
" in Ubuntu, <set clipboard=unnamedplus> works
set clipboard=unnamedplus

" " -- My clipboard management -- "
" " In visual mode, Ctrl-C will put the selected content into the system
" "clipboard
" vmap <C-c> "+yi<Esc>
" " In visual mode, Ctrl-X will cut the selected content into the system
" "clipboard
" vmap <C-x> "+c<Esc>

set tags=tags;/

" ---- Indent options ---- "

set tabstop=2 softtabstop=2 shiftwidth=2
set expandtab
set number ruler
set autoindent smartindent
syntax enable
filetype plugin indent on


" Line number
highlight LineNr term=bold cterm=NONE
  \ ctermfg=DarkGrey
  \ ctermbg=NONE 
  \ gui=NONE guifg=gray16 guibg=NONE

" ---- Indent line ---- "

" Vim
let g:indentLine_color_term=239

" GVim
let g:indentLine_color_gui='#808080'

" none X terminal
let g:indentLine_color_tty_light=7 " (default: 4)
let g:indentLine_color_dark=1 " (default: 2)

" Background (Vim, GVim)
let g:indentLine_bgcolor_gui='#808080'

" set colorcolumn=72

" ---- Search highlight ---- "
set hlsearch "highlight the search results
hi Search cterm=NONE ctermfg=black guifg=black

" ---- Autoformatter ---- "

"automatically format python code on save
if executable("black")
  function PyFormatBuffer()
    if &modified
      let cursor_pos = getpos('.')
      :%!black --fast -l 80 -q - 2>/dev/null
      call setpos('.', cursor_pos)
    endif
  endfunction
  autocmd BufWritePre *.py :call PyFormatBuffer()
endif
"autocmd BufWritePre *.py :Black

"automatically format cpp code on save
if executable("clang-format")
  function CppFormatBuffer()
    if &modified && !empty(findfile('.clang-format', expand('%:p:h') . ';'))
      let cursor_pos = getpos('.')
      :%!clang-format --style=LLVM
      call setpos('.', cursor_pos)
    endif
  endfunction
  autocmd BufWritePre *.h,*.hpp,*.c,*.cpp :call CppFormatBuffer()
endif

autocmd FileType c,cpp,java,php,tex,py,sh autocmd BufWritePre <buffer> %s/\s\+$//e

